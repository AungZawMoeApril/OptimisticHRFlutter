// Mocks generated by Mockito 5.4.5 from annotations
// in h_r_optimistic_mobile/test/widget/features/onsite/screens/onsite_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i6;

import 'package:flutter/material.dart' as _i5;
import 'package:h_r_optimistic_mobile/features/onsite/domain/entities/onsite_entities.dart'
    as _i3;
import 'package:h_r_optimistic_mobile/features/onsite/presentation/providers/onsite_provider.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [OnsiteProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockOnsiteProvider extends _i1.Mock implements _i2.OnsiteProvider {
  MockOnsiteProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i3.OnsiteRequest> get onsiteRequests => (super.noSuchMethod(
        Invocation.getter(#onsiteRequests),
        returnValue: <_i3.OnsiteRequest>[],
      ) as List<_i3.OnsiteRequest>);

  @override
  List<_i3.OnsiteRequest> get pendingRequests => (super.noSuchMethod(
        Invocation.getter(#pendingRequests),
        returnValue: <_i3.OnsiteRequest>[],
      ) as List<_i3.OnsiteRequest>);

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<void> loadOnsiteRequests(String? employeeId) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadOnsiteRequests,
          [employeeId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> loadPendingRequests({
    required String? employeeId,
    bool? isApprover = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadPendingRequests,
          [],
          {
            #employeeId: employeeId,
            #isApprover: isApprover,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> createRequest({
    required String? employeeId,
    required DateTime? startDate,
    required DateTime? endDate,
    required _i5.TimeOfDay? startTime,
    required _i5.TimeOfDay? endTime,
    required _i3.OnsiteType? type,
    required String? location,
    required String? reason,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createRequest,
          [],
          {
            #employeeId: employeeId,
            #startDate: startDate,
            #endDate: endDate,
            #startTime: startTime,
            #endTime: endTime,
            #type: type,
            #location: location,
            #reason: reason,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateRequest({
    required String? requestId,
    required _i3.OnsiteStatus? status,
    String? approverNote,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateRequest,
          [],
          {
            #requestId: requestId,
            #status: status,
            #approverNote: approverNote,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteRequest(String? requestId) => (super.noSuchMethod(
        Invocation.method(
          #deleteRequest,
          [requestId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> cancelRequest(String? requestId) => (super.noSuchMethod(
        Invocation.method(
          #cancelRequest,
          [requestId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> loadStats({
    required String? employeeId,
    required DateTime? startDate,
    required DateTime? endDate,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadStats,
          [],
          {
            #employeeId: employeeId,
            #startDate: startDate,
            #endDate: endDate,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void addListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
